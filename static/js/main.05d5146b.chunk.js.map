{"version":3,"sources":["home.js","database.js","glossary.js","App.js","serviceWorker.js","index.js"],"names":["titleStyle","position","top","left","subtitleStyle","fontSize","databaseStyle","glossaryStyle","ViewDatabase","react_default","a","createElement","react_router_dom","to","Button_default","variant","size","ViewGlossary","Home","state","style","React","Component","Database","data","require","columns","name","label","options","filter","sort","customBodyRender","value","tableMeta","updateValue","opp_link","index","length","cur_item","title","website","href","hint","dist_default","filterType","responsive","selectableRows","print","download","isRowSelectable","dataIndex","onRowsDelete","rowsDeleted","Glossary","App","react_router","exact","path","render","className","home","database","glossary","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05d5146b.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst titleStyle = {\r\n    position: 'absolute',\r\n    top: '40%',\r\n    left: '35%',\r\n}\r\n\r\nconst subtitleStyle = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    fontSize: '20px',\r\n}\r\n\r\nconst databaseStyle = {\r\n    position: 'absolute',\r\n    top: '65%',\r\n    left: '40%',\r\n}\r\n\r\nconst glossaryStyle = {\r\n    position: 'absolute',\r\n    top: '65%',\r\n    left: '60%',\r\n}\r\n\r\nfunction ViewDatabase() {\r\n    return (\r\n        <Link to=\"/database\">\r\n            <Button variant = \"outline-success\" size = \"lg\">\r\n                Database\r\n            </Button>\r\n        </Link>\r\n    )\r\n}\r\n\r\nfunction ViewGlossary() {\r\n    return (\r\n        <Link to=\"/glossary\">\r\n            <Button variant = \"outline-success\" size = \"lg\">\r\n                Glossary\r\n            </Button>\r\n        </Link>\r\n    )\r\n}\r\n\r\nclass Home extends React.Component {\r\n    state = {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 style={titleStyle}>\r\n                    Creators Circle:\r\n                </h1>\r\n                <h2 style={subtitleStyle}>\r\n                    An Opportunities Database for High School Students\r\n                </h2>\r\n                <br />\r\n                <div style={databaseStyle}>\r\n                    <ViewDatabase />\r\n                </div>\r\n                <br />\r\n                <div style={glossaryStyle}>\r\n                    <ViewGlossary />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport MUIDataTable from 'mui-datatables'; //TODO: other options: firebase, mongodb\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Database extends React.Component {\r\n    render() {\r\n        const data = require('./data_2.json');\r\n\r\n        const columns = [\r\n            {\r\n                name: \"title\",\r\n                label: \"Title\",\r\n                options: {\r\n                    filter: true, \r\n                    sort: true,\r\n                    customBodyRender: (value, tableMeta, updateValue) => {\r\n                        let opp_link;\r\n                        for (let index = 0; index < data.length; index++) {\r\n                            let cur_item = data[index];\r\n                            if (cur_item.title == value) {\r\n                                opp_link = cur_item.website;\r\n                                break;\r\n                            }\r\n                        }\r\n                        return (\r\n                            <a href={opp_link}>{value}</a>\r\n                        );\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                name: \"grade_level\",\r\n                label: \"Grade Level\",\r\n                options: {\r\n                    filter: true, \r\n                    sort: true, \r\n                    hint: \"Grade levels this opportunity is open to\"\r\n                }\r\n            },\r\n            {\r\n                name: \"award_amount\",\r\n                label: \"Scholarship Amount (USD)\",\r\n                options: {\r\n                    filter: true, \r\n                    sort: true\r\n                }\r\n            },\r\n            {\r\n                name: \"deadline\",\r\n                label: \"Application Deadline\",\r\n                options: {\r\n                    filter: true, \r\n                    sort: true\r\n                }\r\n            },\r\n            {\r\n                name: \"discipline\",\r\n                label: \"Discipline\",\r\n                options: {\r\n                    filter: true, \r\n                    sort: true\r\n                }\r\n            },\r\n            {\r\n                name: \"opp_type\",\r\n                label: \"Opportunity Type\",\r\n                options: {\r\n                    filter: true, \r\n                    sort: true\r\n                }\r\n            },\r\n            {\r\n                name: \"program_dates\",\r\n                label: \"Program Dates/Length\",\r\n                options: {\r\n                    filter: true, \r\n                    sort: true\r\n                }\r\n            },\r\n            {\r\n                name: \"program_cost\",\r\n                label: \"Program Cost (USD)\",\r\n                options: {\r\n                    filter: true, \r\n                    sort: true\r\n                }\r\n            },\r\n            {\r\n                name: \"location_language\",\r\n                label: \"Location and Language\",\r\n                options: {\r\n                    filter: true, \r\n                    sort: true\r\n                }\r\n            },\r\n            {\r\n                name: \"description\",\r\n                label: \"Description\",\r\n                options: {\r\n                    filter: true, \r\n                    sort: true\r\n                }\r\n            },\r\n            /*\r\n            {\r\n                name: \"website\",\r\n                label: \"Website\",\r\n                options: {\r\n                    filter: true, \r\n                    sort: true, \r\n                    display: \"false\",\r\n                    hint: \"Link to website\"\r\n                }\r\n            }\r\n            */\r\n        ];\r\n\r\n        const options = {\r\n            filterType: 'checkbox',\r\n            responsive: 'scroll',\r\n            selectableRows: 'false',\r\n            print: 'false',\r\n            download: 'false',\r\n            isRowSelectable: (dataIndex) => {\r\n                return false;\r\n            },\r\n            onRowsDelete: (rowsDeleted) => {\r\n                return;\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <br />\r\n                <Link to=\"/\">\r\n                    <Button variant = \"outline-success\" size = \"lg\">\r\n                        Back\r\n                    </Button>\r\n                </Link>\r\n                <br />\r\n                <h2>Opportunities Database</h2> \r\n                <MUIDataTable\r\n                    data={data}\r\n                    columns={columns}\r\n                    options={options}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Database;","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Glossary extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <br />\r\n                <Link to=\"/\">\r\n                    <Button variant = \"outline-success\" size = \"lg\">\r\n                        Back\r\n                    </Button>\r\n                </Link>\r\n                <br />\r\n                <h1>Glossary</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Glossary;","import React, { Component } from 'react';\nimport {HashRouter, Route} from 'react-router-dom';\nimport Home from './home';\nimport Database from './database';\nimport Glossary from './glossary';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          <Route exact={true} path ='/' render={() => (\n            <div className=\"App\">\n            <Home />\n            </div>\n          )} />\n          <Route exact={true} path = '/database' render={() => (\n            <div className=\"App\">\n              <Database />\n            </div>\n          )} />\n          <Route exact={true} path = '/glossary' render={() => (\n            <div className=\"App\">\n              <Glossary />\n            </div>\n          )} />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
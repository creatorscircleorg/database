{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","getMuiTheme","createMuiTheme","overrides","MuiButtonBase","root","data","require","columns","name","label","options","filter","sort","customBodyRender","value","tableMeta","updateValue","opp_link","index","length","cur_item","title","website","react_default","a","createElement","href","filterOptions","names","logic","grade","filterVal","includes","filterType","hint","MuiThemeProvider","theme","this","dist_default","resizableColumns","selectableRows","rowsPerPageOptions","isRowSelectable","dataIndex","onRowsDelete","rowsDeleted","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k80ZAwIeA,qNAhIXC,YAAc,kBAAMC,YAAe,CAC/BC,UAAW,CACPC,cAAe,CACXC,KAAM,gFASlB,IAAMC,EAAOC,EAAQ,KAEfC,EAAU,CACZ,CACIC,KAAM,QACNC,MAAO,cACPC,QAAS,CACLC,QAAQ,EACRC,MAAM,EACNC,iBAAkB,SAACC,EAAOC,EAAWC,GAEjC,IADA,IAAIC,EACKC,EAAQ,EAAGA,EAAQb,EAAKc,OAAQD,IAAS,CAC9C,IAAIE,EAAWf,EAAKa,GACpB,GAAIE,EAASC,OAASP,EAAO,CACzBG,EAAWG,EAASE,QACpB,OAGR,OACIC,EAAAC,EAAAC,cAAA,KAAGC,KAAMT,GAAWH,MAKpC,CACIN,KAAM,WACNC,MAAO,mBACPC,QAAS,CACLC,QAAQ,EACRC,MAAM,IAGd,CACIJ,KAAM,WACNC,MAAO,uBACPC,QAAS,CACLC,QAAQ,EACRC,MAAM,IAGd,CACIJ,KAAM,cACNC,MAAO,cACPC,QAAS,CACLC,QAAQ,EACRC,MAAM,EACNe,cAAe,CACXC,MAAO,CAAC,EAAG,GAAI,GAAI,IACnBC,MAFW,SAELC,EAAOC,GACT,OAAID,EAAME,SAASD,KAO3BE,WAAY,cACZC,KAAM,6CAGd,CACI1B,KAAM,gBACNC,MAAO,iBACPC,QAAS,CACLC,QAAQ,EACRC,MAAM,IAGd,CACIJ,KAAM,oBACNC,MAAO,WACPC,QAAS,CACLC,QAAQ,EACRsB,WAAY,cACZrB,MAAM,IAGd,CACIJ,KAAM,cACNC,MAAO,cACPC,QAAS,CACLC,QAAQ,EACRC,MAAM,KAkBlB,OACIW,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAkBC,MAAOC,KAAKrC,eAC1BuB,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACInB,KAAMA,EACNE,QAASA,EACTG,QArBA,CACZuB,WAAY,WACZM,kBAAkB,EAClBC,eAAgB,OAChBC,mBAAoB,CAAC,GAAI,GAAI,GAAI,GAAI,IACrCC,gBAAiB,SAACC,GACd,OAAO,GAEXC,aAAc,SAACC,iBA5GLC,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d3abbcce.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport MUIDataTable from 'mui-datatables';\nimport Button from 'react-bootstrap/Button';\nimport {Link} from 'react-router-dom';\nimport {createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport './App.css';\n\nclass App extends React.Component {\n    getMuiTheme = () => createMuiTheme({\n        overrides: {\n            MuiButtonBase: {\n                root: {\n                    //backgroundColor: \"#FF0000\"\n                }\n            }\n        }\n    })\n\n\n  render() {\n    const data = require('./data_2.json');\n\n    const columns = [\n        {\n            name: \"title\",\n            label: \"Opportunity\",\n            options: {\n                filter: false, \n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    let opp_link;\n                    for (let index = 0; index < data.length; index++) {\n                        let cur_item = data[index];\n                        if (cur_item.title == value) {\n                            opp_link = cur_item.website;\n                            break;\n                        }\n                    }\n                    return (\n                        <a href={opp_link}>{value}</a>\n                    );\n                }\n            },\n        },\n        {\n            name: \"opp_type\",\n            label: \"Opportunity Type\",\n            options: {\n                filter: false, \n                sort: true\n            }\n        },\n        {\n            name: \"deadline\",\n            label: \"Application Deadline\",\n            options: {\n                filter: false, \n                sort: true\n            }\n        },\n        {\n            name: \"grade_level\",\n            label: \"Grade Level\",\n            options: {\n                filter: true, \n                sort: true, \n                filterOptions: {\n                    names: [9, 10, 11, 12],\n                    logic(grade, filterVal) {\n                        if (grade.includes(filterVal)) {\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    }\n                },\n                filterType: \"multiselect\",\n                hint: \"Grade levels this opportunity is open to\"\n            }\n        },\n        {\n            name: \"program_dates\",\n            label: \"Program Length\",\n            options: {\n                filter: false, \n                sort: true\n            }\n        },\n        {\n            name: \"location_language\",\n            label: \"Location\",\n            options: {\n                filter: true, \n                filterType: \"multiselect\",\n                sort: true\n            }\n        },\n        {\n            name: \"description\",\n            label: \"Description\",\n            options: {\n                filter: false, \n                sort: false\n            }\n        },\n    ];\n\n    const options = {\n        filterType: 'dropdown',\n        resizableColumns: true,\n        selectableRows: 'none',\n        rowsPerPageOptions: [10, 20, 30, 40, 50],\n        isRowSelectable: (dataIndex) => {\n            return false;\n        },\n        onRowsDelete: (rowsDeleted) => {\n            return;\n        }\n    };\n\n    return (\n        <div>\n            <br />\n            <h2>Opportunities Database</h2> \n            <MuiThemeProvider theme={this.getMuiTheme()}>\n                <MUIDataTable\n                    data={data}\n                    columns={columns}\n                    options={options}\n                />\n            </MuiThemeProvider>\n        </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}